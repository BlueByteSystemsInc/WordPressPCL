{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WordPressPCL This is a portable library for consuming the WordPress REST-API in (almost) any C# application. If you find bugs or have any suggestions, feel free to create an issue. License WordPressPCL is published under the MIT License Quickstart WordPress Requirements Since WordPress 4.7 the REST API has been integrated into the core so there's no need for any plugins to get basic functionality. If you want to access protected endpoints, this library supports authentication through JSON Web Tokens (JWT) (plugin required). WordPress 4.7 or newer JWT Authentication for WP REST API Including WordPressPCL The WordPressPCL API Wrapper is avaiable through NuGet : > Install-Package WordPressPCL Supported Plattforms WordPressPCL is built on top of the new .NET Standard targeting netstandard versions 1.1 and 2.0 - therefore it should work on the following plaforms: * .NET Framework 4.5 and newer * .NET Core * Universal Windows Platform (uap) * Windows 8.0 and newer * Windows Phone (WinRT, not Silverlight) * Mono / Xamarin Quickstart: Using the API Wrapper // Initialize var client = new WordPressClient(\"http://demo.wp-api.org/wp-json/\"); // Posts var posts = await client.Posts.GetAll(); var postbyid = await client.Posts.GetById(id); // Comments var comments = await client.Comments.GetAll(); var commentbyid = await client.Comments.GetById(id); var commentsbypost = await client.Comments.GetCommentsForPost(postid, true, false); // Users // JWT authentication var client = new WordPressClient(ApiCredentials.WordPressUri); client.AuthMethod = AuthMethod.JWT; await client.RequestJWToken(ApiCredentials.Username,ApiCredentials.Password); // check if authentication has been successful var isValidToken = await client.IsValidJWToken(); // now you can send requests that require authentication var response = client.Posts.Delete(postid); Supported REST Methods Create Read Update Delete Posts yes yes yes yes Pages yes yes yes yes Comments yes yes yes yes Categories yes yes yes yes Tags yes yes yes yes Users yes yes yes yes Media yes yes yes yes Post Revisions --- yes --- yes Taxonomies --- yes --- --- Post Types --- yes --- --- Post Statuses --- yes --- --- Settings --- yes yes --- Additional Features Authentication using JSON Web Tokens (JWT) HttpResponsePreProcessing : manipulate the API response before deserializing it Contribution Guidelines We're very happy to get input from the community on this project! To keep the code clean we ask you to follow a few simple contribution guidelines. First, create an issue describing what feature you want to add or what problem you're trying to solve, just to make sure no one is already working on that. That also gives us a chance to debate whether a feature is within the scope of this project. Second, please try to stick to the official C# coding guidelines. https://msdn.microsoft.com/en-us/library/ms229002(v=vs.110).aspx Also, make sure to write some tests covering your new or modified code.","title":"Home"},{"location":"#wordpresspcl","text":"This is a portable library for consuming the WordPress REST-API in (almost) any C# application. If you find bugs or have any suggestions, feel free to create an issue.","title":"WordPressPCL"},{"location":"#license","text":"WordPressPCL is published under the MIT License","title":"License"},{"location":"#quickstart","text":"","title":"Quickstart"},{"location":"#wordpress-requirements","text":"Since WordPress 4.7 the REST API has been integrated into the core so there's no need for any plugins to get basic functionality. If you want to access protected endpoints, this library supports authentication through JSON Web Tokens (JWT) (plugin required). WordPress 4.7 or newer JWT Authentication for WP REST API","title":"WordPress Requirements"},{"location":"#including-wordpresspcl","text":"The WordPressPCL API Wrapper is avaiable through NuGet : > Install-Package WordPressPCL","title":"Including WordPressPCL"},{"location":"#supported-plattforms","text":"WordPressPCL is built on top of the new .NET Standard targeting netstandard versions 1.1 and 2.0 - therefore it should work on the following plaforms: * .NET Framework 4.5 and newer * .NET Core * Universal Windows Platform (uap) * Windows 8.0 and newer * Windows Phone (WinRT, not Silverlight) * Mono / Xamarin","title":"Supported Plattforms"},{"location":"#quickstart-using-the-api-wrapper","text":"// Initialize var client = new WordPressClient(\"http://demo.wp-api.org/wp-json/\"); // Posts var posts = await client.Posts.GetAll(); var postbyid = await client.Posts.GetById(id); // Comments var comments = await client.Comments.GetAll(); var commentbyid = await client.Comments.GetById(id); var commentsbypost = await client.Comments.GetCommentsForPost(postid, true, false); // Users // JWT authentication var client = new WordPressClient(ApiCredentials.WordPressUri); client.AuthMethod = AuthMethod.JWT; await client.RequestJWToken(ApiCredentials.Username,ApiCredentials.Password); // check if authentication has been successful var isValidToken = await client.IsValidJWToken(); // now you can send requests that require authentication var response = client.Posts.Delete(postid);","title":"Quickstart: Using the API Wrapper"},{"location":"#supported-rest-methods","text":"Create Read Update Delete Posts yes yes yes yes Pages yes yes yes yes Comments yes yes yes yes Categories yes yes yes yes Tags yes yes yes yes Users yes yes yes yes Media yes yes yes yes Post Revisions --- yes --- yes Taxonomies --- yes --- --- Post Types --- yes --- --- Post Statuses --- yes --- --- Settings --- yes yes ---","title":"Supported REST Methods"},{"location":"#additional-features","text":"Authentication using JSON Web Tokens (JWT) HttpResponsePreProcessing : manipulate the API response before deserializing it","title":"Additional Features"},{"location":"#contribution-guidelines","text":"We're very happy to get input from the community on this project! To keep the code clean we ask you to follow a few simple contribution guidelines. First, create an issue describing what feature you want to add or what problem you're trying to solve, just to make sure no one is already working on that. That also gives us a chance to debate whether a feature is within the scope of this project. Second, please try to stick to the official C# coding guidelines. https://msdn.microsoft.com/en-us/library/ms229002(v=vs.110).aspx Also, make sure to write some tests covering your new or modified code.","title":"Contribution Guidelines"},{"location":"v1/types/comments/","text":"Comments Here is a list of methods and examples of working with Comments GetAll() // returns all comments var comments = await client.Comments.GetAll(); GetByID // returns comment by ID var comment = await client.Comments.GetByID(123); GetCommentsForPost // returns comments from post var comments = await client.Comments.GetCommentsForPost(123) Query Create parametrized request // returns result of query var queryBuilder = new CommentsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var comments = await client.Comments.Query(queryBuilder); Get threaded comments If your blog supports threaded comments (comments with direct answers) you can order and get the right depth for them with this handy extension method: var comments = await client.Comments.GetCommentsForPost(123) var commentsThreaded = comments.ToThreaded(); Create new Comment // returns created comment var comment = new Comment() { Content = new Content(\"Comment\"), PostId = 123, AuthorId = 1, AuthorEmail = \"test@test.com\" }; if (await client.IsValidJWToken()) { var createdComment = await client.Comments.Create(comment); } Update Comment // returns updated comment var comment= client.Comments.GetByID(123); comment.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedComment = await client.Comments.Update(comment); } Delete Comment // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Comments.Delete(123); }","title":"Comments"},{"location":"v1/types/comments/#comments","text":"Here is a list of methods and examples of working with Comments","title":"Comments"},{"location":"v1/types/comments/#getall","text":"// returns all comments var comments = await client.Comments.GetAll();","title":"GetAll()"},{"location":"v1/types/comments/#getbyid","text":"// returns comment by ID var comment = await client.Comments.GetByID(123);","title":"GetByID"},{"location":"v1/types/comments/#getcommentsforpost","text":"// returns comments from post var comments = await client.Comments.GetCommentsForPost(123)","title":"GetCommentsForPost"},{"location":"v1/types/comments/#query","text":"Create parametrized request // returns result of query var queryBuilder = new CommentsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var comments = await client.Comments.Query(queryBuilder);","title":"Query"},{"location":"v1/types/comments/#get-threaded-comments","text":"If your blog supports threaded comments (comments with direct answers) you can order and get the right depth for them with this handy extension method: var comments = await client.Comments.GetCommentsForPost(123) var commentsThreaded = comments.ToThreaded();","title":"Get threaded comments"},{"location":"v1/types/comments/#create-new-comment","text":"// returns created comment var comment = new Comment() { Content = new Content(\"Comment\"), PostId = 123, AuthorId = 1, AuthorEmail = \"test@test.com\" }; if (await client.IsValidJWToken()) { var createdComment = await client.Comments.Create(comment); }","title":"Create new Comment"},{"location":"v1/types/comments/#update-comment","text":"// returns updated comment var comment= client.Comments.GetByID(123); comment.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedComment = await client.Comments.Update(comment); }","title":"Update Comment"},{"location":"v1/types/comments/#delete-comment","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Comments.Delete(123); }","title":"Delete Comment"},{"location":"v1/types/posts/","text":"Posts Here is a list of methods and examples of working with Posts GetAll() // returns all posts var posts = await client.Posts.GetAll(); GetByID // returns post by ID var post = await client.Posts.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new PostsQueryBuilder(); queryBuilder.PerPage=40; queryBuilder.Page=2; queryBuilder.Categories= new int[]{1,2,3}; var posts = await client.Posts.Query(queryBuilder); Create new Post // returns created post var post = new Post() { Title = new Title(\"Title 1\"), Content = new Content(\"Content PostCreate\") }; if (await client.IsValidJWToken()) { var createdPost = await client.Posts.Create(post); } Update Post // returns updated post var post = client.Posts.GetByID(123); post.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedPost = await client.Posts.Update(post); } Delete Post // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Posts.Delete(123); } Get Post Revisions // returns revisions of post var revisions = await client.Posts.Revisions(123);","title":"Posts"},{"location":"v1/types/posts/#posts","text":"Here is a list of methods and examples of working with Posts","title":"Posts"},{"location":"v1/types/posts/#getall","text":"// returns all posts var posts = await client.Posts.GetAll();","title":"GetAll()"},{"location":"v1/types/posts/#getbyid","text":"// returns post by ID var post = await client.Posts.GetByID(123);","title":"GetByID"},{"location":"v1/types/posts/#query","text":"Create parametrized request // returns result of query var queryBuilder = new PostsQueryBuilder(); queryBuilder.PerPage=40; queryBuilder.Page=2; queryBuilder.Categories= new int[]{1,2,3}; var posts = await client.Posts.Query(queryBuilder);","title":"Query"},{"location":"v1/types/posts/#create-new-post","text":"// returns created post var post = new Post() { Title = new Title(\"Title 1\"), Content = new Content(\"Content PostCreate\") }; if (await client.IsValidJWToken()) { var createdPost = await client.Posts.Create(post); }","title":"Create new Post"},{"location":"v1/types/posts/#update-post","text":"// returns updated post var post = client.Posts.GetByID(123); post.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedPost = await client.Posts.Update(post); }","title":"Update Post"},{"location":"v1/types/posts/#delete-post","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Posts.Delete(123); }","title":"Delete Post"},{"location":"v1/types/posts/#get-post-revisions","text":"// returns revisions of post var revisions = await client.Posts.Revisions(123);","title":"Get Post Revisions"},{"location":"v2/getting-started/","text":"Getting Started","title":"Getting Started"},{"location":"v2/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"v2/types/comments/","text":"Here is a list of methods and examples of working with Comments GetAll() // returns all comments var comments = await client.Comments.GetAll(); GetByID // returns comment by ID var comment = await client.Comments.GetByID(123); GetCommentsForPost // returns comments from post var comments = await client.Comments.GetCommentsForPost(123) Query Create parametrized request // returns result of query var queryBuilder = new CommentsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var comments = await client.Comments.Query(queryBuilder); Get threaded comments If your blog supports threaded comments (comments with direct answers) you can order and get the right depth for them with this handy extension method: var comments = await client.Comments.GetCommentsForPost(123) var commentsThreaded = comments.ToThreaded(); Create new Comment // returns created comment var comment = new Comment() { Content = new Content(\"Comment\"), PostId = 123, AuthorId = 1, AuthorEmail = \"test@test.com\" }; if (await client.IsValidJWToken()) { var createdComment = await client.Comments.Create(comment); } Update Comment // returns updated comment var comment= client.Comments.GetByID(123); comment.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedComment = await client.Comments.Update(comment); } Delete Comment // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Comments.Delete(123); }","title":"Comments"},{"location":"v2/types/comments/#getall","text":"// returns all comments var comments = await client.Comments.GetAll();","title":"GetAll()"},{"location":"v2/types/comments/#getbyid","text":"// returns comment by ID var comment = await client.Comments.GetByID(123);","title":"GetByID"},{"location":"v2/types/comments/#getcommentsforpost","text":"// returns comments from post var comments = await client.Comments.GetCommentsForPost(123)","title":"GetCommentsForPost"},{"location":"v2/types/comments/#query","text":"Create parametrized request // returns result of query var queryBuilder = new CommentsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var comments = await client.Comments.Query(queryBuilder);","title":"Query"},{"location":"v2/types/comments/#get-threaded-comments","text":"If your blog supports threaded comments (comments with direct answers) you can order and get the right depth for them with this handy extension method: var comments = await client.Comments.GetCommentsForPost(123) var commentsThreaded = comments.ToThreaded();","title":"Get threaded comments"},{"location":"v2/types/comments/#create-new-comment","text":"// returns created comment var comment = new Comment() { Content = new Content(\"Comment\"), PostId = 123, AuthorId = 1, AuthorEmail = \"test@test.com\" }; if (await client.IsValidJWToken()) { var createdComment = await client.Comments.Create(comment); }","title":"Create new Comment"},{"location":"v2/types/comments/#update-comment","text":"// returns updated comment var comment= client.Comments.GetByID(123); comment.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedComment = await client.Comments.Update(comment); }","title":"Update Comment"},{"location":"v2/types/comments/#delete-comment","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Comments.Delete(123); }","title":"Delete Comment"}]}