{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home This is a portable library for consuming the WordPress REST-API in (almost) any C# application. If you find bugs or have any suggestions, feel free to create an issue. License WordPressPCL is published under the MIT License Quickstart WordPress Requirements Since WordPress 4.7 the REST API has been integrated into the core so there's no need for any plugins to get basic functionality. If you want to access protected endpoints, this library supports authentication through JSON Web Tokens (JWT) (plugin required). WordPress 4.7 or newer JWT Authentication for WP REST API Including WordPressPCL The WordPressPCL API Wrapper is avaiable through NuGet : > Install-Package WordPressPCL Supported Plattforms WordPressPCL is built on top of the new .NET Standard targeting netstandard versions 1.1 and 2.0 - therefore it should work on the following plaforms: * .NET Framework 4.5 and newer * .NET Core * Universal Windows Platform (uap) * Windows 8.0 and newer * Windows Phone (WinRT, not Silverlight) * Mono / Xamarin Quickstart: Using the API Wrapper // Initialize var client = new WordPressClient(\"http://demo.wp-api.org/wp-json/\"); // Posts var posts = await client.Posts.GetAll(); var postbyid = await client.Posts.GetById(id); // Comments var comments = await client.Comments.GetAll(); var commentbyid = await client.Comments.GetById(id); var commentsbypost = await client.Comments.GetCommentsForPost(postid, true, false); // Users // JWT authentication var client = new WordPressClient(ApiCredentials.WordPressUri); client.AuthMethod = AuthMethod.JWT; await client.RequestJWToken(ApiCredentials.Username,ApiCredentials.Password); // check if authentication has been successful var isValidToken = await client.IsValidJWToken(); // now you can send requests that require authentication var response = client.Posts.Delete(postid); Supported REST Methods Create Read Update Delete Posts yes yes yes yes Pages yes yes yes yes Comments yes yes yes yes Categories yes yes yes yes Tags yes yes yes yes Users yes yes yes yes Media yes yes yes yes Post Revisions --- yes --- yes Taxonomies --- yes --- --- Post Types --- yes --- --- Post Statuses --- yes --- --- Settings --- yes yes --- Additional Features Authentication using JSON Web Tokens (JWT) HttpResponsePreProcessing : manipulate the API response before deserializing it Contribution Guidelines We're very happy to get input from the community on this project! To keep the code clean we ask you to follow a few simple contribution guidelines. First, create an issue describing what feature you want to add or what problem you're trying to solve, just to make sure no one is already working on that. That also gives us a chance to debate whether a feature is within the scope of this project. Second, please try to stick to the official C# coding guidelines. https://msdn.microsoft.com/en-us/library/ms229002(v=vs.110).aspx Also, make sure to write some tests covering your new or modified code.","title":"Home"},{"location":"#home","text":"This is a portable library for consuming the WordPress REST-API in (almost) any C# application. If you find bugs or have any suggestions, feel free to create an issue.","title":"Home"},{"location":"#license","text":"WordPressPCL is published under the MIT License","title":"License"},{"location":"#quickstart","text":"","title":"Quickstart"},{"location":"#wordpress-requirements","text":"Since WordPress 4.7 the REST API has been integrated into the core so there's no need for any plugins to get basic functionality. If you want to access protected endpoints, this library supports authentication through JSON Web Tokens (JWT) (plugin required). WordPress 4.7 or newer JWT Authentication for WP REST API","title":"WordPress Requirements"},{"location":"#including-wordpresspcl","text":"The WordPressPCL API Wrapper is avaiable through NuGet : > Install-Package WordPressPCL","title":"Including WordPressPCL"},{"location":"#supported-plattforms","text":"WordPressPCL is built on top of the new .NET Standard targeting netstandard versions 1.1 and 2.0 - therefore it should work on the following plaforms: * .NET Framework 4.5 and newer * .NET Core * Universal Windows Platform (uap) * Windows 8.0 and newer * Windows Phone (WinRT, not Silverlight) * Mono / Xamarin","title":"Supported Plattforms"},{"location":"#quickstart-using-the-api-wrapper","text":"// Initialize var client = new WordPressClient(\"http://demo.wp-api.org/wp-json/\"); // Posts var posts = await client.Posts.GetAll(); var postbyid = await client.Posts.GetById(id); // Comments var comments = await client.Comments.GetAll(); var commentbyid = await client.Comments.GetById(id); var commentsbypost = await client.Comments.GetCommentsForPost(postid, true, false); // Users // JWT authentication var client = new WordPressClient(ApiCredentials.WordPressUri); client.AuthMethod = AuthMethod.JWT; await client.RequestJWToken(ApiCredentials.Username,ApiCredentials.Password); // check if authentication has been successful var isValidToken = await client.IsValidJWToken(); // now you can send requests that require authentication var response = client.Posts.Delete(postid);","title":"Quickstart: Using the API Wrapper"},{"location":"#supported-rest-methods","text":"Create Read Update Delete Posts yes yes yes yes Pages yes yes yes yes Comments yes yes yes yes Categories yes yes yes yes Tags yes yes yes yes Users yes yes yes yes Media yes yes yes yes Post Revisions --- yes --- yes Taxonomies --- yes --- --- Post Types --- yes --- --- Post Statuses --- yes --- --- Settings --- yes yes ---","title":"Supported REST Methods"},{"location":"#additional-features","text":"Authentication using JSON Web Tokens (JWT) HttpResponsePreProcessing : manipulate the API response before deserializing it","title":"Additional Features"},{"location":"#contribution-guidelines","text":"We're very happy to get input from the community on this project! To keep the code clean we ask you to follow a few simple contribution guidelines. First, create an issue describing what feature you want to add or what problem you're trying to solve, just to make sure no one is already working on that. That also gives us a chance to debate whether a feature is within the scope of this project. Second, please try to stick to the official C# coding guidelines. https://msdn.microsoft.com/en-us/library/ms229002(v=vs.110).aspx Also, make sure to write some tests covering your new or modified code.","title":"Contribution Guidelines"},{"location":"version%201.x/types/categories/","text":"Categories Here is a list of methods and examples of working with Categories GetAll() // returns all categories var categories = await client.Categories.GetAll(); GetByID // returns category by ID var category = await client.Categories.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new CategoriesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var categories = await client.Categories.Query(queryBuilder); Create new Category // returns created category var category = new Category() { Name = \"Title 1\", Description = \"Content\" }; if (await client.IsValidJWToken()) { var createdCategory = await client.Categories.Create(category); } Update Category // returns updated category var category = client.Categories.GetByID(123); category.Name = \"New Name\"; if (await client.IsValidJWToken()) { var updatedCategory = await client.Categories.Update(category); } Delete Category // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Categories.Delete(123); }","title":"Categories"},{"location":"version%201.x/types/categories/#categories","text":"Here is a list of methods and examples of working with Categories","title":"Categories"},{"location":"version%201.x/types/categories/#getall","text":"// returns all categories var categories = await client.Categories.GetAll();","title":"GetAll()"},{"location":"version%201.x/types/categories/#getbyid","text":"// returns category by ID var category = await client.Categories.GetByID(123);","title":"GetByID"},{"location":"version%201.x/types/categories/#query","text":"Create parametrized request // returns result of query var queryBuilder = new CategoriesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var categories = await client.Categories.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/types/categories/#create-new-category","text":"// returns created category var category = new Category() { Name = \"Title 1\", Description = \"Content\" }; if (await client.IsValidJWToken()) { var createdCategory = await client.Categories.Create(category); }","title":"Create new Category"},{"location":"version%201.x/types/categories/#update-category","text":"// returns updated category var category = client.Categories.GetByID(123); category.Name = \"New Name\"; if (await client.IsValidJWToken()) { var updatedCategory = await client.Categories.Update(category); }","title":"Update Category"},{"location":"version%201.x/types/categories/#delete-category","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Categories.Delete(123); }","title":"Delete Category"},{"location":"version%201.x/types/comments/","text":"Comments Here is a list of methods and examples of working with Comments GetAll() // returns all comments var comments = await client.Comments.GetAll(); GetByID // returns comment by ID var comment = await client.Comments.GetByID(123); GetCommentsForPost // returns comments from post var comments = await client.Comments.GetCommentsForPost(123) Query Create parametrized request // returns result of query var queryBuilder = new CommentsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var comments = await client.Comments.Query(queryBuilder); Get threaded comments If your blog supports threaded comments (comments with direct answers) you can order and get the right depth for them with this handy extension method: var comments = await client.Comments.GetCommentsForPost(123) var commentsThreaded = comments.ToThreaded(); Create new Comment // returns created comment var comment = new Comment() { Content = new Content(\"Comment\"), PostId = 123, AuthorId = 1, AuthorEmail = \"test@test.com\" }; if (await client.IsValidJWToken()) { var createdComment = await client.Comments.Create(comment); } Update Comment // returns updated comment var comment= client.Comments.GetByID(123); comment.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedComment = await client.Comments.Update(comment); } Delete Comment // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Comments.Delete(123); }","title":"Comments"},{"location":"version%201.x/types/comments/#comments","text":"Here is a list of methods and examples of working with Comments","title":"Comments"},{"location":"version%201.x/types/comments/#getall","text":"// returns all comments var comments = await client.Comments.GetAll();","title":"GetAll()"},{"location":"version%201.x/types/comments/#getbyid","text":"// returns comment by ID var comment = await client.Comments.GetByID(123);","title":"GetByID"},{"location":"version%201.x/types/comments/#getcommentsforpost","text":"// returns comments from post var comments = await client.Comments.GetCommentsForPost(123)","title":"GetCommentsForPost"},{"location":"version%201.x/types/comments/#query","text":"Create parametrized request // returns result of query var queryBuilder = new CommentsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var comments = await client.Comments.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/types/comments/#get-threaded-comments","text":"If your blog supports threaded comments (comments with direct answers) you can order and get the right depth for them with this handy extension method: var comments = await client.Comments.GetCommentsForPost(123) var commentsThreaded = comments.ToThreaded();","title":"Get threaded comments"},{"location":"version%201.x/types/comments/#create-new-comment","text":"// returns created comment var comment = new Comment() { Content = new Content(\"Comment\"), PostId = 123, AuthorId = 1, AuthorEmail = \"test@test.com\" }; if (await client.IsValidJWToken()) { var createdComment = await client.Comments.Create(comment); }","title":"Create new Comment"},{"location":"version%201.x/types/comments/#update-comment","text":"// returns updated comment var comment= client.Comments.GetByID(123); comment.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedComment = await client.Comments.Update(comment); }","title":"Update Comment"},{"location":"version%201.x/types/comments/#delete-comment","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Comments.Delete(123); }","title":"Delete Comment"},{"location":"version%201.x/types/media/","text":"Media Here is a list of methods and examples of working with Media GetAll() // returns all media var media = await client.Media.GetAll(); GetByID // returns media by ID var media = await client.Media.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new MediaQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var media = await client.Pages.Query(queryBuilder); Create new Media Create for .Net Standard 1.1+ .Net Standard 1.1-1.3 doesn`t support file manipulation (read or write). So only way to send file content is to create Stream with file content manually. Applicable for .netcore 1.0 apps // returns created media // for create media item you must read them to Stream. Media items can be audio, video, image, pdf ot any othe type supported by wordpress Stream s = File.OpenRead(\"pathToMedia/media.jpg\"); if (await client.IsValidJWToken()) { var createdMedia = await client.Media.Create(s,\"media.jpg\"); } Create for .Net Standard 2.0+ .Net Standard 2.0 supports files manipulation. You can send media files by passing its full path to file. Applicable for .netcore 2.0 apps // returns created media // for create media item you must read them to Stream. Media items can be audio, video, image, pdf ot any othe type supported by wordpress if (await client.IsValidJWToken()) { var createdMedia = await client.Media.Create(@\"C:\\pathToFile\\media.jpg\",\"media.jpg\"); } Update Media // returns updated media var media= client.Media.GetByID(123); media.Title.Raw = \"New Title\"; if (await client.IsValidJWToken()) { var updatedMedia = await client.Media.Update(media); } Delete Media // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Media.Delete(123); }","title":"Media"},{"location":"version%201.x/types/media/#media","text":"Here is a list of methods and examples of working with Media","title":"Media"},{"location":"version%201.x/types/media/#getall","text":"// returns all media var media = await client.Media.GetAll();","title":"GetAll()"},{"location":"version%201.x/types/media/#getbyid","text":"// returns media by ID var media = await client.Media.GetByID(123);","title":"GetByID"},{"location":"version%201.x/types/media/#query","text":"Create parametrized request // returns result of query var queryBuilder = new MediaQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var media = await client.Pages.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/types/media/#create-new-media","text":"","title":"Create new Media"},{"location":"version%201.x/types/media/#create-for-net-standard-11","text":".Net Standard 1.1-1.3 doesn`t support file manipulation (read or write). So only way to send file content is to create Stream with file content manually. Applicable for .netcore 1.0 apps // returns created media // for create media item you must read them to Stream. Media items can be audio, video, image, pdf ot any othe type supported by wordpress Stream s = File.OpenRead(\"pathToMedia/media.jpg\"); if (await client.IsValidJWToken()) { var createdMedia = await client.Media.Create(s,\"media.jpg\"); }","title":"Create for .Net Standard 1.1+"},{"location":"version%201.x/types/media/#create-for-net-standard-20","text":".Net Standard 2.0 supports files manipulation. You can send media files by passing its full path to file. Applicable for .netcore 2.0 apps // returns created media // for create media item you must read them to Stream. Media items can be audio, video, image, pdf ot any othe type supported by wordpress if (await client.IsValidJWToken()) { var createdMedia = await client.Media.Create(@\"C:\\pathToFile\\media.jpg\",\"media.jpg\"); }","title":"Create for .Net Standard 2.0+"},{"location":"version%201.x/types/media/#update-media","text":"// returns updated media var media= client.Media.GetByID(123); media.Title.Raw = \"New Title\"; if (await client.IsValidJWToken()) { var updatedMedia = await client.Media.Update(media); }","title":"Update Media"},{"location":"version%201.x/types/media/#delete-media","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Media.Delete(123); }","title":"Delete Media"},{"location":"version%201.x/types/pages/","text":"Pages Here is a list of methods and examples of working with Pages GetAll() // returns all pages var pages = await client.Pages.GetAll(); GetByID // returns page by ID var page = await client.Pages.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new PagesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var pages = await client.Pages.Query(queryBuilder); Create new Page // returns created page var page = new Page() { Title = new Title(\"Title 1\"), Content = new Content(\"Content PageCreate\") }; if (await client.IsValidJWToken()) { var createdPage = await client.Pages.Create(page); } Update Page // returns updated page var page= client.Pages.GetByID(123); page.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedPage = await client.Pages.Update(page); } Delete Page // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Pages.Delete(123); }","title":"Pages"},{"location":"version%201.x/types/pages/#pages","text":"Here is a list of methods and examples of working with Pages","title":"Pages"},{"location":"version%201.x/types/pages/#getall","text":"// returns all pages var pages = await client.Pages.GetAll();","title":"GetAll()"},{"location":"version%201.x/types/pages/#getbyid","text":"// returns page by ID var page = await client.Pages.GetByID(123);","title":"GetByID"},{"location":"version%201.x/types/pages/#query","text":"Create parametrized request // returns result of query var queryBuilder = new PagesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var pages = await client.Pages.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/types/pages/#create-new-page","text":"// returns created page var page = new Page() { Title = new Title(\"Title 1\"), Content = new Content(\"Content PageCreate\") }; if (await client.IsValidJWToken()) { var createdPage = await client.Pages.Create(page); }","title":"Create new Page"},{"location":"version%201.x/types/pages/#update-page","text":"// returns updated page var page= client.Pages.GetByID(123); page.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedPage = await client.Pages.Update(page); }","title":"Update Page"},{"location":"version%201.x/types/pages/#delete-page","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Pages.Delete(123); }","title":"Delete Page"},{"location":"version%201.x/types/posts/","text":"Posts Here is a list of methods and examples of working with Posts GetAll() // returns all posts var posts = await client.Posts.GetAll(); GetByID // returns post by ID var post = await client.Posts.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new PostsQueryBuilder(); queryBuilder.PerPage=40; queryBuilder.Page=2; queryBuilder.Categories= new int[]{1,2,3}; var posts = await client.Posts.Query(queryBuilder); Create new Post // returns created post var post = new Post() { Title = new Title(\"Title 1\"), Content = new Content(\"Content PostCreate\") }; if (await client.IsValidJWToken()) { var createdPost = await client.Posts.Create(post); } Update Post // returns updated post var post = client.Posts.GetByID(123); post.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedPost = await client.Posts.Update(post); } Delete Post // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Posts.Delete(123); } Get Post Revisions // returns revisions of post var revisions = await client.Posts.Revisions(123);","title":"Posts"},{"location":"version%201.x/types/posts/#posts","text":"Here is a list of methods and examples of working with Posts","title":"Posts"},{"location":"version%201.x/types/posts/#getall","text":"// returns all posts var posts = await client.Posts.GetAll();","title":"GetAll()"},{"location":"version%201.x/types/posts/#getbyid","text":"// returns post by ID var post = await client.Posts.GetByID(123);","title":"GetByID"},{"location":"version%201.x/types/posts/#query","text":"Create parametrized request // returns result of query var queryBuilder = new PostsQueryBuilder(); queryBuilder.PerPage=40; queryBuilder.Page=2; queryBuilder.Categories= new int[]{1,2,3}; var posts = await client.Posts.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/types/posts/#create-new-post","text":"// returns created post var post = new Post() { Title = new Title(\"Title 1\"), Content = new Content(\"Content PostCreate\") }; if (await client.IsValidJWToken()) { var createdPost = await client.Posts.Create(post); }","title":"Create new Post"},{"location":"version%201.x/types/posts/#update-post","text":"// returns updated post var post = client.Posts.GetByID(123); post.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedPost = await client.Posts.Update(post); }","title":"Update Post"},{"location":"version%201.x/types/posts/#delete-post","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Posts.Delete(123); }","title":"Delete Post"},{"location":"version%201.x/types/posts/#get-post-revisions","text":"// returns revisions of post var revisions = await client.Posts.Revisions(123);","title":"Get Post Revisions"},{"location":"version%201.x/types/poststatuses/","text":"PostStatuses Here is a list of methods and examples of working with PostStatuses GetAll() // returns all poststatuses var poststatuses = await client.PostStatuses.GetAll(); GetByID // returns poststatus by ID var poststatus = await client.PostStatuses.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new PostStatusesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var poststatuses = await client.PostStatuses.Query(queryBuilder);","title":"PostStatuses"},{"location":"version%201.x/types/poststatuses/#poststatuses","text":"Here is a list of methods and examples of working with PostStatuses","title":"PostStatuses"},{"location":"version%201.x/types/poststatuses/#getall","text":"// returns all poststatuses var poststatuses = await client.PostStatuses.GetAll();","title":"GetAll()"},{"location":"version%201.x/types/poststatuses/#getbyid","text":"// returns poststatus by ID var poststatus = await client.PostStatuses.GetByID(123);","title":"GetByID"},{"location":"version%201.x/types/poststatuses/#query","text":"Create parametrized request // returns result of query var queryBuilder = new PostStatusesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var poststatuses = await client.PostStatuses.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/types/posttypes/","text":"PostTypes Here is a list of methods and examples of working with PostTypes GetAll() // returns all posttypes var posttypes = await client.PostTypes.GetAll(); GetByID // returns posttype by ID var posttype = await client.PostTypes.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new PostTypesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var posttypes = await client.PostTypes.Query(queryBuilder);","title":"PostTypes"},{"location":"version%201.x/types/posttypes/#posttypes","text":"Here is a list of methods and examples of working with PostTypes","title":"PostTypes"},{"location":"version%201.x/types/posttypes/#getall","text":"// returns all posttypes var posttypes = await client.PostTypes.GetAll();","title":"GetAll()"},{"location":"version%201.x/types/posttypes/#getbyid","text":"// returns posttype by ID var posttype = await client.PostTypes.GetByID(123);","title":"GetByID"},{"location":"version%201.x/types/posttypes/#query","text":"Create parametrized request // returns result of query var queryBuilder = new PostTypesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var posttypes = await client.PostTypes.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/types/settings/","text":"Settings Here is a list of methods and examples of working with Settings GetSettings() // returns current settings var settings = await client.GetSettings(); Update Settings //update settings var settings = await client.GetSettings(); settings.Description = \"New Site Description\"; var updatedSettings = await client.UpdateSettings(settings);","title":"Settings"},{"location":"version%201.x/types/settings/#settings","text":"Here is a list of methods and examples of working with Settings","title":"Settings"},{"location":"version%201.x/types/settings/#getsettings","text":"// returns current settings var settings = await client.GetSettings();","title":"GetSettings()"},{"location":"version%201.x/types/settings/#update-settings","text":"//update settings var settings = await client.GetSettings(); settings.Description = \"New Site Description\"; var updatedSettings = await client.UpdateSettings(settings);","title":"Update Settings"},{"location":"version%201.x/types/tags/","text":"Tags Here is a list of methods and examples of working with Tags GetAll() // returns all tags var tags = await client.Tags.GetAll(); GetByID // returns tag by ID var tag = await client.Tags.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new TagsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var tags = await client.Tags.Query(queryBuilder); Create new Tag // returns created tag var tag = new Tag() { Name = \"Name\", Description = \"Tag\" }; if (await client.IsValidJWToken()) { var createdtag = await client.Tags.Create(tag); } Update Tag // returns updated tag var tag = client.Tags.GetByID(123); tag.Name = \"New Name\"; if (await client.IsValidJWToken()) { var updatedTag = await client.Tags.Update(tag); } Delete Tag // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Tags.Delete(123); }","title":"Tags"},{"location":"version%201.x/types/tags/#tags","text":"Here is a list of methods and examples of working with Tags","title":"Tags"},{"location":"version%201.x/types/tags/#getall","text":"// returns all tags var tags = await client.Tags.GetAll();","title":"GetAll()"},{"location":"version%201.x/types/tags/#getbyid","text":"// returns tag by ID var tag = await client.Tags.GetByID(123);","title":"GetByID"},{"location":"version%201.x/types/tags/#query","text":"Create parametrized request // returns result of query var queryBuilder = new TagsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var tags = await client.Tags.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/types/tags/#create-new-tag","text":"// returns created tag var tag = new Tag() { Name = \"Name\", Description = \"Tag\" }; if (await client.IsValidJWToken()) { var createdtag = await client.Tags.Create(tag); }","title":"Create new Tag"},{"location":"version%201.x/types/tags/#update-tag","text":"// returns updated tag var tag = client.Tags.GetByID(123); tag.Name = \"New Name\"; if (await client.IsValidJWToken()) { var updatedTag = await client.Tags.Update(tag); }","title":"Update Tag"},{"location":"version%201.x/types/tags/#delete-tag","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Tags.Delete(123); }","title":"Delete Tag"},{"location":"version%201.x/types/taxonomies/","text":"Taxonomies Here is a list of methods and examples of working with Taxonomies GetAll() // returns all taxonomies var taxonomies = await client.Taxonomies.GetAll(); GetByID // returns taxonomy by ID var taxonomy = await client.Taxonomies.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new TaxonomiesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var taxonomies = await client.Taxonomies.Query(queryBuilder);","title":"Taxonomies"},{"location":"version%201.x/types/taxonomies/#taxonomies","text":"Here is a list of methods and examples of working with Taxonomies","title":"Taxonomies"},{"location":"version%201.x/types/taxonomies/#getall","text":"// returns all taxonomies var taxonomies = await client.Taxonomies.GetAll();","title":"GetAll()"},{"location":"version%201.x/types/taxonomies/#getbyid","text":"// returns taxonomy by ID var taxonomy = await client.Taxonomies.GetByID(123);","title":"GetByID"},{"location":"version%201.x/types/taxonomies/#query","text":"Create parametrized request // returns result of query var queryBuilder = new TaxonomiesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var taxonomies = await client.Taxonomies.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/types/users/","text":"Users Here is a list of methods and examples of working with Users GetAll() // execute request users without credentials - returns only you var users = await client.Users.GetAll(); // send credentials - list of all users var users = await client.Users.GetAll(useAuth:true); GetByID // returns user by ID var user = await client.Users.GetByID(123); GetCurrentUser // returns current user var user = await client.Users.GetCurrentUser(); Query Create parametrized request // returns result of query var queryBuilder = new UsersQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var users = await client.Users.Query(queryBuilder); Create new User // returns created user var user = new User(\"username\",\"email\",\"password\") { NickName= \"nickname\" }; if (await client.IsValidJWToken()) { var user = await client.Users.Create(user); } Update User // returns updated user var user = client.Users.GetByID(123); user.Name = \"New Name\"; if (await client.IsValidJWToken()) { var updatedUser = await client.Users.Update(user); } Delete User // returns result of deletion if (await client.IsValidJWToken()) { //second param - user to reassign all content var result = await client.Users.Delete(123,321); }","title":"Users"},{"location":"version%201.x/types/users/#users","text":"Here is a list of methods and examples of working with Users","title":"Users"},{"location":"version%201.x/types/users/#getall","text":"// execute request users without credentials - returns only you var users = await client.Users.GetAll(); // send credentials - list of all users var users = await client.Users.GetAll(useAuth:true);","title":"GetAll()"},{"location":"version%201.x/types/users/#getbyid","text":"// returns user by ID var user = await client.Users.GetByID(123);","title":"GetByID"},{"location":"version%201.x/types/users/#getcurrentuser","text":"// returns current user var user = await client.Users.GetCurrentUser();","title":"GetCurrentUser"},{"location":"version%201.x/types/users/#query","text":"Create parametrized request // returns result of query var queryBuilder = new UsersQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var users = await client.Users.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/types/users/#create-new-user","text":"// returns created user var user = new User(\"username\",\"email\",\"password\") { NickName= \"nickname\" }; if (await client.IsValidJWToken()) { var user = await client.Users.Create(user); }","title":"Create new User"},{"location":"version%201.x/types/users/#update-user","text":"// returns updated user var user = client.Users.GetByID(123); user.Name = \"New Name\"; if (await client.IsValidJWToken()) { var updatedUser = await client.Users.Update(user); }","title":"Update User"},{"location":"version%201.x/types/users/#delete-user","text":"// returns result of deletion if (await client.IsValidJWToken()) { //second param - user to reassign all content var result = await client.Users.Delete(123,321); }","title":"Delete User"},{"location":"version%202.x/getting-started/","text":"Getting Started","title":"Getting Started"},{"location":"version%202.x/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"version%202.x/types/comments/","text":"Here is a list of methods and examples of working with Comments GetAll() // returns all comments var comments = await client.Comments.GetAll(); GetByID // returns comment by ID var comment = await client.Comments.GetByID(123); GetCommentsForPost // returns comments from post var comments = await client.Comments.GetCommentsForPost(123) Query Create parametrized request // returns result of query var queryBuilder = new CommentsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var comments = await client.Comments.Query(queryBuilder); Get threaded comments If your blog supports threaded comments (comments with direct answers) you can order and get the right depth for them with this handy extension method: var comments = await client.Comments.GetCommentsForPost(123) var commentsThreaded = comments.ToThreaded(); Create new Comment // returns created comment var comment = new Comment() { Content = new Content(\"Comment\"), PostId = 123, AuthorId = 1, AuthorEmail = \"test@test.com\" }; if (await client.IsValidJWToken()) { var createdComment = await client.Comments.Create(comment); } Update Comment // returns updated comment var comment= client.Comments.GetByID(123); comment.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedComment = await client.Comments.Update(comment); } Delete Comment // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Comments.Delete(123); }","title":"Comments"},{"location":"version%202.x/types/comments/#getall","text":"// returns all comments var comments = await client.Comments.GetAll();","title":"GetAll()"},{"location":"version%202.x/types/comments/#getbyid","text":"// returns comment by ID var comment = await client.Comments.GetByID(123);","title":"GetByID"},{"location":"version%202.x/types/comments/#getcommentsforpost","text":"// returns comments from post var comments = await client.Comments.GetCommentsForPost(123)","title":"GetCommentsForPost"},{"location":"version%202.x/types/comments/#query","text":"Create parametrized request // returns result of query var queryBuilder = new CommentsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var comments = await client.Comments.Query(queryBuilder);","title":"Query"},{"location":"version%202.x/types/comments/#get-threaded-comments","text":"If your blog supports threaded comments (comments with direct answers) you can order and get the right depth for them with this handy extension method: var comments = await client.Comments.GetCommentsForPost(123) var commentsThreaded = comments.ToThreaded();","title":"Get threaded comments"},{"location":"version%202.x/types/comments/#create-new-comment","text":"// returns created comment var comment = new Comment() { Content = new Content(\"Comment\"), PostId = 123, AuthorId = 1, AuthorEmail = \"test@test.com\" }; if (await client.IsValidJWToken()) { var createdComment = await client.Comments.Create(comment); }","title":"Create new Comment"},{"location":"version%202.x/types/comments/#update-comment","text":"// returns updated comment var comment= client.Comments.GetByID(123); comment.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedComment = await client.Comments.Update(comment); }","title":"Update Comment"},{"location":"version%202.x/types/comments/#delete-comment","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Comments.Delete(123); }","title":"Delete Comment"}]}