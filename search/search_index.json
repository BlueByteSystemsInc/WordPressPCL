{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home This is a portable library for consuming the WordPress REST-API in (almost) any C# application. If you find bugs or have any suggestions, feel free to create an issue. License WordPressPCL is published under the MIT License Quickstart WordPress Requirements Since WordPress 4.7 the REST API has been integrated into the core so there's no need for any plugins to get basic functionality. If you want to access protected endpoints, this library supports authentication through JSON Web Tokens (JWT) (plugin required). WordPress 4.7 or newer JWT Authentication for WP REST API Including WordPressPCL The WordPressPCL API Wrapper is avaiable through NuGet : > Install-Package WordPressPCL Supported Plattforms WordPressPCL is built on top of the new .NET Standard targeting netstandard versions 1.1 and 2.0 - therefore it should work on the following plaforms: * .NET Framework 4.5 and newer * .NET Core * Universal Windows Platform (uap) * Windows 8.0 and newer * Windows Phone (WinRT, not Silverlight) * Mono / Xamarin Quickstart: Using the API Wrapper // Initialize var client = new WordPressClient(\"http://demo.wp-api.org/wp-json/\"); // Posts var posts = await client.Posts.GetAll(); var postbyid = await client.Posts.GetById(id); // Comments var comments = await client.Comments.GetAll(); var commentbyid = await client.Comments.GetById(id); var commentsbypost = await client.Comments.GetCommentsForPost(postid, true, false); // Users // JWT authentication var client = new WordPressClient(ApiCredentials.WordPressUri); client.AuthMethod = AuthMethod.JWT; await client.RequestJWToken(ApiCredentials.Username,ApiCredentials.Password); // check if authentication has been successful var isValidToken = await client.IsValidJWToken(); // now you can send requests that require authentication var response = client.Posts.Delete(postid); Supported REST Methods Create Read Update Delete Posts yes yes yes yes Pages yes yes yes yes Comments yes yes yes yes Categories yes yes yes yes Tags yes yes yes yes Users yes yes yes yes Media yes yes yes yes Post Revisions --- yes --- yes Taxonomies --- yes --- --- Post Types --- yes --- --- Post Statuses --- yes --- --- Settings --- yes yes --- Additional Features Authentication using JSON Web Tokens (JWT) HttpResponsePreProcessing : manipulate the API response before deserializing it Contribution Guidelines We're very happy to get input from the community on this project! To keep the code clean we ask you to follow a few simple contribution guidelines. First, create an issue describing what feature you want to add or what problem you're trying to solve, just to make sure no one is already working on that. That also gives us a chance to debate whether a feature is within the scope of this project. Second, please try to stick to the official C# coding guidelines. https://msdn.microsoft.com/en-us/library/ms229002(v=vs.110).aspx Also, make sure to write some tests covering your new or modified code.","title":"Home"},{"location":"#home","text":"This is a portable library for consuming the WordPress REST-API in (almost) any C# application. If you find bugs or have any suggestions, feel free to create an issue.","title":"Home"},{"location":"#license","text":"WordPressPCL is published under the MIT License","title":"License"},{"location":"#quickstart","text":"","title":"Quickstart"},{"location":"#wordpress-requirements","text":"Since WordPress 4.7 the REST API has been integrated into the core so there's no need for any plugins to get basic functionality. If you want to access protected endpoints, this library supports authentication through JSON Web Tokens (JWT) (plugin required). WordPress 4.7 or newer JWT Authentication for WP REST API","title":"WordPress Requirements"},{"location":"#including-wordpresspcl","text":"The WordPressPCL API Wrapper is avaiable through NuGet : > Install-Package WordPressPCL","title":"Including WordPressPCL"},{"location":"#supported-plattforms","text":"WordPressPCL is built on top of the new .NET Standard targeting netstandard versions 1.1 and 2.0 - therefore it should work on the following plaforms: * .NET Framework 4.5 and newer * .NET Core * Universal Windows Platform (uap) * Windows 8.0 and newer * Windows Phone (WinRT, not Silverlight) * Mono / Xamarin","title":"Supported Plattforms"},{"location":"#quickstart-using-the-api-wrapper","text":"// Initialize var client = new WordPressClient(\"http://demo.wp-api.org/wp-json/\"); // Posts var posts = await client.Posts.GetAll(); var postbyid = await client.Posts.GetById(id); // Comments var comments = await client.Comments.GetAll(); var commentbyid = await client.Comments.GetById(id); var commentsbypost = await client.Comments.GetCommentsForPost(postid, true, false); // Users // JWT authentication var client = new WordPressClient(ApiCredentials.WordPressUri); client.AuthMethod = AuthMethod.JWT; await client.RequestJWToken(ApiCredentials.Username,ApiCredentials.Password); // check if authentication has been successful var isValidToken = await client.IsValidJWToken(); // now you can send requests that require authentication var response = client.Posts.Delete(postid);","title":"Quickstart: Using the API Wrapper"},{"location":"#supported-rest-methods","text":"Create Read Update Delete Posts yes yes yes yes Pages yes yes yes yes Comments yes yes yes yes Categories yes yes yes yes Tags yes yes yes yes Users yes yes yes yes Media yes yes yes yes Post Revisions --- yes --- yes Taxonomies --- yes --- --- Post Types --- yes --- --- Post Statuses --- yes --- --- Settings --- yes yes ---","title":"Supported REST Methods"},{"location":"#additional-features","text":"Authentication using JSON Web Tokens (JWT) HttpResponsePreProcessing : manipulate the API response before deserializing it","title":"Additional Features"},{"location":"#contribution-guidelines","text":"We're very happy to get input from the community on this project! To keep the code clean we ask you to follow a few simple contribution guidelines. First, create an issue describing what feature you want to add or what problem you're trying to solve, just to make sure no one is already working on that. That also gives us a chance to debate whether a feature is within the scope of this project. Second, please try to stick to the official C# coding guidelines. https://msdn.microsoft.com/en-us/library/ms229002(v=vs.110).aspx Also, make sure to write some tests covering your new or modified code.","title":"Contribution Guidelines"},{"location":"version%201.x/troubleshooting/","text":"Troubleshooting WordPressClient throws WPException This happens when the rest api has received your request but for various reasons can not process it. You can catch this exception and in the additional information you can find out exactly what problems are with your request. To do this, you can access the BadRequest property, which contains the fields: * Name - the service name of the problem * Message - description of the problem * Data is a dynamic object that contains additional information about the exception Example: try { //create empty post is not allowed var post = await client.Posts.Create(new Post()); } catch (WPException wpex) { wpex.BadRequest.Name //system name wpex.BadRequest.Message //description wpex.BadRequest.Data //dynamic object with any non-structured additional info } WordPressPCL.Models.Exceptions.WPException: No route was found matching the URL and request method This usually happens when a serverside redirect to retreive a new JWT Token changes the POST request into a GET request (e.g. on www-to-non-www or http-to-https redirects). WordPressClient returns null Check your WordPress URL. It should look like this: https://wordpress-site.com/wp-json/ Check your request. If you're making a post query that requires the edit context, or for whatever reason requires auth headers, you need to tell the query method to include the auth headers using an additional parameter, as it will not by default. Ex: _client.Posts.Query(query, true);","title":"Troubleshooting"},{"location":"version%201.x/troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"version%201.x/troubleshooting/#wordpressclient-throws-wpexception","text":"This happens when the rest api has received your request but for various reasons can not process it. You can catch this exception and in the additional information you can find out exactly what problems are with your request. To do this, you can access the BadRequest property, which contains the fields: * Name - the service name of the problem * Message - description of the problem * Data is a dynamic object that contains additional information about the exception Example: try { //create empty post is not allowed var post = await client.Posts.Create(new Post()); } catch (WPException wpex) { wpex.BadRequest.Name //system name wpex.BadRequest.Message //description wpex.BadRequest.Data //dynamic object with any non-structured additional info }","title":"WordPressClient throws WPException"},{"location":"version%201.x/troubleshooting/#wordpresspclmodelsexceptionswpexception-no-route-was-found-matching-the-url-and-request-method","text":"This usually happens when a serverside redirect to retreive a new JWT Token changes the POST request into a GET request (e.g. on www-to-non-www or http-to-https redirects).","title":"WordPressPCL.Models.Exceptions.WPException: No route was found matching the URL and request method"},{"location":"version%201.x/troubleshooting/#wordpressclient-returns-null","text":"Check your WordPress URL. It should look like this: https://wordpress-site.com/wp-json/ Check your request. If you're making a post query that requires the edit context, or for whatever reason requires auth headers, you need to tell the query method to include the auth headers using an additional parameter, as it will not by default. Ex: _client.Posts.Query(query, true);","title":"WordPressClient returns null"},{"location":"version%201.x/customization/customHttpClient/","text":"Custom HttpClient You can inject your own instance of an HttpClient into the WordPressClient. This allows you to re-use an existing instance, set desired headers etc. var httpClient = new HttpClient { BaseAddress = new Uri(ApiCredentials.WordPressUri) }; httpClient.DefaultRequestHeaders.Add(\"User-Agent\", \"Mozilla/5.0 (Windows NT 6.2; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0\"); httpClient.DefaultRequestHeaders.Add(\"Referer\", \"https://github.com/wp-net/WordPressPCL\"); var client = new WordPressClient(httpClient); var posts = await client.Posts.GetAll();","title":"Custom HttpClient"},{"location":"version%201.x/customization/customHttpClient/#custom-httpclient","text":"You can inject your own instance of an HttpClient into the WordPressClient. This allows you to re-use an existing instance, set desired headers etc. var httpClient = new HttpClient { BaseAddress = new Uri(ApiCredentials.WordPressUri) }; httpClient.DefaultRequestHeaders.Add(\"User-Agent\", \"Mozilla/5.0 (Windows NT 6.2; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0\"); httpClient.DefaultRequestHeaders.Add(\"Referer\", \"https://github.com/wp-net/WordPressPCL\"); var client = new WordPressClient(httpClient); var posts = await client.Posts.GetAll();","title":"Custom HttpClient"},{"location":"version%201.x/customization/customJsonSerializationSettings/","text":"Custom JsonSerializationSettings In some cases, it may be useful to change the default settings for the serialization / deserialization process of the Json.NET library You can do this in the following way: var client = new WordPressClient(\"https://site.com/wp-json/\"); client.JsonSerializationSettings = new JsonSerializationSettings() { DateFormatHandling=DateFormatHandling.IsoDateFormat, DateFormatString = \"d MMMM YYYY\" }; // working with library For detailed information on the available settings, see the Json.NET documentation https://www.newtonsoft.com/json/help/html/SerializationSettings.htm","title":"Custom JsonSerializationSettings"},{"location":"version%201.x/customization/customJsonSerializationSettings/#custom-jsonserializationsettings","text":"In some cases, it may be useful to change the default settings for the serialization / deserialization process of the Json.NET library You can do this in the following way: var client = new WordPressClient(\"https://site.com/wp-json/\"); client.JsonSerializationSettings = new JsonSerializationSettings() { DateFormatHandling=DateFormatHandling.IsoDateFormat, DateFormatString = \"d MMMM YYYY\" }; // working with library For detailed information on the available settings, see the Json.NET documentation https://www.newtonsoft.com/json/help/html/SerializationSettings.htm","title":"Custom JsonSerializationSettings"},{"location":"version%201.x/customization/customRequest/","text":"CustomRequest Here is a list of methods and examples of working with Custom Requests Overview WP REST Api can be modified and extended by plugins (Woocommerce, Contact Form 7, ACF and others), so Custom requests allow you to create non-standard requests. Before send requests you must create DTO Model of your request. Here is an example with Contact Form 7 plugin DTO Model public class ContactFormItem { public int? id; public string title; public string slug; public string locale; } Get var forms = client.CustomRequest.Get<IEnumerable<ContactFormItem>>(\"contact-form-7/v1/contact-forms\"); Create //requires two T parameters: first - input model, second - output model var forms = client.CustomRequest.Create<ContactFormItem,ContactFormItem>(\"contact-form-7/v1/contact-forms\",new ContactFormItem() { title = \"test\" }); Update //requires two T parameters: first - input model, second - output model var forms = client.CustomRequest.Update<ContactFormItem,ContactFormItem>(\"contact-form-7/v1/contact-forms/123\",new ContactFormItem() { title = \"test\" }); Delete var forms = client.CustomRequest.Delete(\"contact-form-7/v1/contact-forms/123\");","title":"CustomRequest"},{"location":"version%201.x/customization/customRequest/#customrequest","text":"Here is a list of methods and examples of working with Custom Requests","title":"CustomRequest"},{"location":"version%201.x/customization/customRequest/#overview","text":"WP REST Api can be modified and extended by plugins (Woocommerce, Contact Form 7, ACF and others), so Custom requests allow you to create non-standard requests. Before send requests you must create DTO Model of your request. Here is an example with Contact Form 7 plugin","title":"Overview"},{"location":"version%201.x/customization/customRequest/#dto-model","text":"public class ContactFormItem { public int? id; public string title; public string slug; public string locale; }","title":"DTO Model"},{"location":"version%201.x/customization/customRequest/#get","text":"var forms = client.CustomRequest.Get<IEnumerable<ContactFormItem>>(\"contact-form-7/v1/contact-forms\");","title":"Get"},{"location":"version%201.x/customization/customRequest/#create","text":"//requires two T parameters: first - input model, second - output model var forms = client.CustomRequest.Create<ContactFormItem,ContactFormItem>(\"contact-form-7/v1/contact-forms\",new ContactFormItem() { title = \"test\" });","title":"Create"},{"location":"version%201.x/customization/customRequest/#update","text":"//requires two T parameters: first - input model, second - output model var forms = client.CustomRequest.Update<ContactFormItem,ContactFormItem>(\"contact-form-7/v1/contact-forms/123\",new ContactFormItem() { title = \"test\" });","title":"Update"},{"location":"version%201.x/customization/customRequest/#delete","text":"var forms = client.CustomRequest.Delete(\"contact-form-7/v1/contact-forms/123\");","title":"Delete"},{"location":"version%201.x/customization/httpResponsePreProcessing/","text":"HttpResponsePreProcessing Sometimes it's necessary to pre-process the HttpResponseMessage before deserializeing it. To do this, you can use the \"HttpResponsePreProcessing\" to pass a function to the WordPressClient. This function takes the HttpResponse content string as a parameter, and has to return a string that will be deserialized. // Add a HttpResponsePreProcessing function : client.HttpResponsePreProcessing = (response) => { string updatedResponse = response; // Do something here on the updatedResponse return updatedResponse; }; WordPress on Azure / ISS When deploying a WordPress website on Microsoft Azure, the REST API will add unnecessary HTML before every POST request . In order to correct this, you can add a HttpResponsePreProcessing function that will delete the HTML code that is preventing the deserialization of the JSON content: client.HttpResponsePreProcessing = (responseString) => { var clearedString = responseString.Replace(\"\\n\", \"\"); var regex = @\"\\<head(.+)body\\>\"; return System.Text.RegularExpressions.Regex.Replace(clearedString, regex, \"\"); };","title":"HttpResponsePreProcessing"},{"location":"version%201.x/customization/httpResponsePreProcessing/#httpresponsepreprocessing","text":"Sometimes it's necessary to pre-process the HttpResponseMessage before deserializeing it. To do this, you can use the \"HttpResponsePreProcessing\" to pass a function to the WordPressClient. This function takes the HttpResponse content string as a parameter, and has to return a string that will be deserialized. // Add a HttpResponsePreProcessing function : client.HttpResponsePreProcessing = (response) => { string updatedResponse = response; // Do something here on the updatedResponse return updatedResponse; };","title":"HttpResponsePreProcessing"},{"location":"version%201.x/customization/httpResponsePreProcessing/#wordpress-on-azure-iss","text":"When deploying a WordPress website on Microsoft Azure, the REST API will add unnecessary HTML before every POST request . In order to correct this, you can add a HttpResponsePreProcessing function that will delete the HTML code that is preventing the deserialization of the JSON content: client.HttpResponsePreProcessing = (responseString) => { var clearedString = responseString.Replace(\"\\n\", \"\"); var regex = @\"\\<head(.+)body\\>\"; return System.Text.RegularExpressions.Regex.Replace(clearedString, regex, \"\"); };","title":"WordPress on Azure / ISS"},{"location":"version%201.x/entities/categories/","text":"Categories Here is a list of methods and examples of working with Categories GetAll() // returns all categories var categories = await client.Categories.GetAll(); GetByID // returns category by ID var category = await client.Categories.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new CategoriesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var categories = await client.Categories.Query(queryBuilder); Create new Category // returns created category var category = new Category() { Name = \"Title 1\", Description = \"Content\" }; if (await client.IsValidJWToken()) { var createdCategory = await client.Categories.Create(category); } Update Category // returns updated category var category = client.Categories.GetByID(123); category.Name = \"New Name\"; if (await client.IsValidJWToken()) { var updatedCategory = await client.Categories.Update(category); } Delete Category // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Categories.Delete(123); }","title":"Categories"},{"location":"version%201.x/entities/categories/#categories","text":"Here is a list of methods and examples of working with Categories","title":"Categories"},{"location":"version%201.x/entities/categories/#getall","text":"// returns all categories var categories = await client.Categories.GetAll();","title":"GetAll()"},{"location":"version%201.x/entities/categories/#getbyid","text":"// returns category by ID var category = await client.Categories.GetByID(123);","title":"GetByID"},{"location":"version%201.x/entities/categories/#query","text":"Create parametrized request // returns result of query var queryBuilder = new CategoriesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var categories = await client.Categories.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/entities/categories/#create-new-category","text":"// returns created category var category = new Category() { Name = \"Title 1\", Description = \"Content\" }; if (await client.IsValidJWToken()) { var createdCategory = await client.Categories.Create(category); }","title":"Create new Category"},{"location":"version%201.x/entities/categories/#update-category","text":"// returns updated category var category = client.Categories.GetByID(123); category.Name = \"New Name\"; if (await client.IsValidJWToken()) { var updatedCategory = await client.Categories.Update(category); }","title":"Update Category"},{"location":"version%201.x/entities/categories/#delete-category","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Categories.Delete(123); }","title":"Delete Category"},{"location":"version%201.x/entities/comments/","text":"Comments Here is a list of methods and examples of working with Comments GetAll() // returns all comments var comments = await client.Comments.GetAll(); GetByID // returns comment by ID var comment = await client.Comments.GetByID(123); GetCommentsForPost // returns comments from post var comments = await client.Comments.GetCommentsForPost(123) Query Create parametrized request // returns result of query var queryBuilder = new CommentsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var comments = await client.Comments.Query(queryBuilder); Get threaded comments If your blog supports threaded comments (comments with direct answers) you can order and get the right depth for them with this handy extension method: var comments = await client.Comments.GetCommentsForPost(123) var commentsThreaded = comments.ToThreaded(); Create new Comment // returns created comment var comment = new Comment() { Content = new Content(\"Comment\"), PostId = 123, AuthorId = 1, AuthorEmail = \"test@test.com\" }; if (await client.IsValidJWToken()) { var createdComment = await client.Comments.Create(comment); } Update Comment // returns updated comment var comment= client.Comments.GetByID(123); comment.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedComment = await client.Comments.Update(comment); } Delete Comment // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Comments.Delete(123); }","title":"Comments"},{"location":"version%201.x/entities/comments/#comments","text":"Here is a list of methods and examples of working with Comments","title":"Comments"},{"location":"version%201.x/entities/comments/#getall","text":"// returns all comments var comments = await client.Comments.GetAll();","title":"GetAll()"},{"location":"version%201.x/entities/comments/#getbyid","text":"// returns comment by ID var comment = await client.Comments.GetByID(123);","title":"GetByID"},{"location":"version%201.x/entities/comments/#getcommentsforpost","text":"// returns comments from post var comments = await client.Comments.GetCommentsForPost(123)","title":"GetCommentsForPost"},{"location":"version%201.x/entities/comments/#query","text":"Create parametrized request // returns result of query var queryBuilder = new CommentsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var comments = await client.Comments.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/entities/comments/#get-threaded-comments","text":"If your blog supports threaded comments (comments with direct answers) you can order and get the right depth for them with this handy extension method: var comments = await client.Comments.GetCommentsForPost(123) var commentsThreaded = comments.ToThreaded();","title":"Get threaded comments"},{"location":"version%201.x/entities/comments/#create-new-comment","text":"// returns created comment var comment = new Comment() { Content = new Content(\"Comment\"), PostId = 123, AuthorId = 1, AuthorEmail = \"test@test.com\" }; if (await client.IsValidJWToken()) { var createdComment = await client.Comments.Create(comment); }","title":"Create new Comment"},{"location":"version%201.x/entities/comments/#update-comment","text":"// returns updated comment var comment= client.Comments.GetByID(123); comment.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedComment = await client.Comments.Update(comment); }","title":"Update Comment"},{"location":"version%201.x/entities/comments/#delete-comment","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Comments.Delete(123); }","title":"Delete Comment"},{"location":"version%201.x/entities/customPostType/","text":"Custom Post Type To create post of custom post type you should do 2 things 1. Enable rest api support for custom post type registering-a-custom-post-type-with-rest-api-support 2. This is a one of contrintuitive things in WP REST API, but for creating post with custom type you should send requests to custom endpoint. For this task you can use our Custom Requests feature Example: var post = new Post() { Title = new Title(\"Title 1\"), Content = new Content(\"Content PostCreate\"), Type = \"portfolio\" //your custom post type }; //change portfolio to your custom post type var createdPost = await _clientAuth.CustomRequest.Create<Post, Post>(\"wp/v2/portfolio\",post);","title":"Custom Post Type"},{"location":"version%201.x/entities/customPostType/#custom-post-type","text":"To create post of custom post type you should do 2 things 1. Enable rest api support for custom post type registering-a-custom-post-type-with-rest-api-support 2. This is a one of contrintuitive things in WP REST API, but for creating post with custom type you should send requests to custom endpoint. For this task you can use our Custom Requests feature Example: var post = new Post() { Title = new Title(\"Title 1\"), Content = new Content(\"Content PostCreate\"), Type = \"portfolio\" //your custom post type }; //change portfolio to your custom post type var createdPost = await _clientAuth.CustomRequest.Create<Post, Post>(\"wp/v2/portfolio\",post);","title":"Custom Post Type"},{"location":"version%201.x/entities/media/","text":"Media Here is a list of methods and examples of working with Media GetAll() // returns all media var media = await client.Media.GetAll(); GetByID // returns media by ID var media = await client.Media.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new MediaQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var media = await client.Pages.Query(queryBuilder); Create new Media Create for .Net Standard 1.1+ .Net Standard 1.1-1.3 doesn`t support file manipulation (read or write). So only way to send file content is to create Stream with file content manually. Applicable for .netcore 1.0 apps // returns created media // for create media item you must read them to Stream. Media items can be audio, video, image, pdf ot any othe type supported by wordpress Stream s = File.OpenRead(\"pathToMedia/media.jpg\"); if (await client.IsValidJWToken()) { var createdMedia = await client.Media.Create(s,\"media.jpg\"); } Create for .Net Standard 2.0+ .Net Standard 2.0 supports files manipulation. You can send media files by passing its full path to file. Applicable for .netcore 2.0 apps // returns created media // for create media item you must read them to Stream. Media items can be audio, video, image, pdf ot any othe type supported by wordpress if (await client.IsValidJWToken()) { var createdMedia = await client.Media.Create(@\"C:\\pathToFile\\media.jpg\",\"media.jpg\"); } Update Media // returns updated media var media= client.Media.GetByID(123); media.Title.Raw = \"New Title\"; if (await client.IsValidJWToken()) { var updatedMedia = await client.Media.Update(media); } Delete Media // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Media.Delete(123); }","title":"Media"},{"location":"version%201.x/entities/media/#media","text":"Here is a list of methods and examples of working with Media","title":"Media"},{"location":"version%201.x/entities/media/#getall","text":"// returns all media var media = await client.Media.GetAll();","title":"GetAll()"},{"location":"version%201.x/entities/media/#getbyid","text":"// returns media by ID var media = await client.Media.GetByID(123);","title":"GetByID"},{"location":"version%201.x/entities/media/#query","text":"Create parametrized request // returns result of query var queryBuilder = new MediaQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var media = await client.Pages.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/entities/media/#create-new-media","text":"","title":"Create new Media"},{"location":"version%201.x/entities/media/#create-for-net-standard-11","text":".Net Standard 1.1-1.3 doesn`t support file manipulation (read or write). So only way to send file content is to create Stream with file content manually. Applicable for .netcore 1.0 apps // returns created media // for create media item you must read them to Stream. Media items can be audio, video, image, pdf ot any othe type supported by wordpress Stream s = File.OpenRead(\"pathToMedia/media.jpg\"); if (await client.IsValidJWToken()) { var createdMedia = await client.Media.Create(s,\"media.jpg\"); }","title":"Create for .Net Standard 1.1+"},{"location":"version%201.x/entities/media/#create-for-net-standard-20","text":".Net Standard 2.0 supports files manipulation. You can send media files by passing its full path to file. Applicable for .netcore 2.0 apps // returns created media // for create media item you must read them to Stream. Media items can be audio, video, image, pdf ot any othe type supported by wordpress if (await client.IsValidJWToken()) { var createdMedia = await client.Media.Create(@\"C:\\pathToFile\\media.jpg\",\"media.jpg\"); }","title":"Create for .Net Standard 2.0+"},{"location":"version%201.x/entities/media/#update-media","text":"// returns updated media var media= client.Media.GetByID(123); media.Title.Raw = \"New Title\"; if (await client.IsValidJWToken()) { var updatedMedia = await client.Media.Update(media); }","title":"Update Media"},{"location":"version%201.x/entities/media/#delete-media","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Media.Delete(123); }","title":"Delete Media"},{"location":"version%201.x/entities/pages/","text":"Pages Here is a list of methods and examples of working with Pages GetAll() // returns all pages var pages = await client.Pages.GetAll(); GetByID // returns page by ID var page = await client.Pages.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new PagesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var pages = await client.Pages.Query(queryBuilder); Create new Page // returns created page var page = new Page() { Title = new Title(\"Title 1\"), Content = new Content(\"Content PageCreate\") }; if (await client.IsValidJWToken()) { var createdPage = await client.Pages.Create(page); } Update Page // returns updated page var page= client.Pages.GetByID(123); page.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedPage = await client.Pages.Update(page); } Delete Page // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Pages.Delete(123); }","title":"Pages"},{"location":"version%201.x/entities/pages/#pages","text":"Here is a list of methods and examples of working with Pages","title":"Pages"},{"location":"version%201.x/entities/pages/#getall","text":"// returns all pages var pages = await client.Pages.GetAll();","title":"GetAll()"},{"location":"version%201.x/entities/pages/#getbyid","text":"// returns page by ID var page = await client.Pages.GetByID(123);","title":"GetByID"},{"location":"version%201.x/entities/pages/#query","text":"Create parametrized request // returns result of query var queryBuilder = new PagesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var pages = await client.Pages.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/entities/pages/#create-new-page","text":"// returns created page var page = new Page() { Title = new Title(\"Title 1\"), Content = new Content(\"Content PageCreate\") }; if (await client.IsValidJWToken()) { var createdPage = await client.Pages.Create(page); }","title":"Create new Page"},{"location":"version%201.x/entities/pages/#update-page","text":"// returns updated page var page= client.Pages.GetByID(123); page.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedPage = await client.Pages.Update(page); }","title":"Update Page"},{"location":"version%201.x/entities/pages/#delete-page","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Pages.Delete(123); }","title":"Delete Page"},{"location":"version%201.x/entities/posts/","text":"Posts Here is a list of methods and examples of working with Posts GetAll() // returns all posts var posts = await client.Posts.GetAll(); GetByID // returns post by ID var post = await client.Posts.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new PostsQueryBuilder(); queryBuilder.PerPage=40; queryBuilder.Page=2; queryBuilder.Categories= new int[]{1,2,3}; var posts = await client.Posts.Query(queryBuilder); Create new Post // returns created post var post = new Post() { Title = new Title(\"Title 1\"), Content = new Content(\"Content PostCreate\") }; if (await client.IsValidJWToken()) { var createdPost = await client.Posts.Create(post); } Update Post // returns updated post var post = client.Posts.GetByID(123); post.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedPost = await client.Posts.Update(post); } Delete Post // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Posts.Delete(123); } Get Post Revisions // returns revisions of post var revisions = await client.Posts.Revisions(123);","title":"Posts"},{"location":"version%201.x/entities/posts/#posts","text":"Here is a list of methods and examples of working with Posts","title":"Posts"},{"location":"version%201.x/entities/posts/#getall","text":"// returns all posts var posts = await client.Posts.GetAll();","title":"GetAll()"},{"location":"version%201.x/entities/posts/#getbyid","text":"// returns post by ID var post = await client.Posts.GetByID(123);","title":"GetByID"},{"location":"version%201.x/entities/posts/#query","text":"Create parametrized request // returns result of query var queryBuilder = new PostsQueryBuilder(); queryBuilder.PerPage=40; queryBuilder.Page=2; queryBuilder.Categories= new int[]{1,2,3}; var posts = await client.Posts.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/entities/posts/#create-new-post","text":"// returns created post var post = new Post() { Title = new Title(\"Title 1\"), Content = new Content(\"Content PostCreate\") }; if (await client.IsValidJWToken()) { var createdPost = await client.Posts.Create(post); }","title":"Create new Post"},{"location":"version%201.x/entities/posts/#update-post","text":"// returns updated post var post = client.Posts.GetByID(123); post.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedPost = await client.Posts.Update(post); }","title":"Update Post"},{"location":"version%201.x/entities/posts/#delete-post","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Posts.Delete(123); }","title":"Delete Post"},{"location":"version%201.x/entities/posts/#get-post-revisions","text":"// returns revisions of post var revisions = await client.Posts.Revisions(123);","title":"Get Post Revisions"},{"location":"version%201.x/entities/poststatuses/","text":"PostStatuses Here is a list of methods and examples of working with PostStatuses GetAll() // returns all poststatuses var poststatuses = await client.PostStatuses.GetAll(); GetByID // returns poststatus by ID var poststatus = await client.PostStatuses.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new PostStatusesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var poststatuses = await client.PostStatuses.Query(queryBuilder);","title":"PostStatuses"},{"location":"version%201.x/entities/poststatuses/#poststatuses","text":"Here is a list of methods and examples of working with PostStatuses","title":"PostStatuses"},{"location":"version%201.x/entities/poststatuses/#getall","text":"// returns all poststatuses var poststatuses = await client.PostStatuses.GetAll();","title":"GetAll()"},{"location":"version%201.x/entities/poststatuses/#getbyid","text":"// returns poststatus by ID var poststatus = await client.PostStatuses.GetByID(123);","title":"GetByID"},{"location":"version%201.x/entities/poststatuses/#query","text":"Create parametrized request // returns result of query var queryBuilder = new PostStatusesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var poststatuses = await client.PostStatuses.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/entities/posttypes/","text":"PostTypes Here is a list of methods and examples of working with PostTypes GetAll() // returns all posttypes var posttypes = await client.PostTypes.GetAll(); GetByID // returns posttype by ID var posttype = await client.PostTypes.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new PostTypesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var posttypes = await client.PostTypes.Query(queryBuilder);","title":"PostTypes"},{"location":"version%201.x/entities/posttypes/#posttypes","text":"Here is a list of methods and examples of working with PostTypes","title":"PostTypes"},{"location":"version%201.x/entities/posttypes/#getall","text":"// returns all posttypes var posttypes = await client.PostTypes.GetAll();","title":"GetAll()"},{"location":"version%201.x/entities/posttypes/#getbyid","text":"// returns posttype by ID var posttype = await client.PostTypes.GetByID(123);","title":"GetByID"},{"location":"version%201.x/entities/posttypes/#query","text":"Create parametrized request // returns result of query var queryBuilder = new PostTypesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var posttypes = await client.PostTypes.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/entities/settings/","text":"Settings Here is a list of methods and examples of working with Settings GetSettings() // returns current settings var settings = await client.GetSettings(); Update Settings //update settings var settings = await client.GetSettings(); settings.Description = \"New Site Description\"; var updatedSettings = await client.UpdateSettings(settings);","title":"Settings"},{"location":"version%201.x/entities/settings/#settings","text":"Here is a list of methods and examples of working with Settings","title":"Settings"},{"location":"version%201.x/entities/settings/#getsettings","text":"// returns current settings var settings = await client.GetSettings();","title":"GetSettings()"},{"location":"version%201.x/entities/settings/#update-settings","text":"//update settings var settings = await client.GetSettings(); settings.Description = \"New Site Description\"; var updatedSettings = await client.UpdateSettings(settings);","title":"Update Settings"},{"location":"version%201.x/entities/tags/","text":"Tags Here is a list of methods and examples of working with Tags GetAll() // returns all tags var tags = await client.Tags.GetAll(); GetByID // returns tag by ID var tag = await client.Tags.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new TagsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var tags = await client.Tags.Query(queryBuilder); Create new Tag // returns created tag var tag = new Tag() { Name = \"Name\", Description = \"Tag\" }; if (await client.IsValidJWToken()) { var createdtag = await client.Tags.Create(tag); } Update Tag // returns updated tag var tag = client.Tags.GetByID(123); tag.Name = \"New Name\"; if (await client.IsValidJWToken()) { var updatedTag = await client.Tags.Update(tag); } Delete Tag // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Tags.Delete(123); }","title":"Tags"},{"location":"version%201.x/entities/tags/#tags","text":"Here is a list of methods and examples of working with Tags","title":"Tags"},{"location":"version%201.x/entities/tags/#getall","text":"// returns all tags var tags = await client.Tags.GetAll();","title":"GetAll()"},{"location":"version%201.x/entities/tags/#getbyid","text":"// returns tag by ID var tag = await client.Tags.GetByID(123);","title":"GetByID"},{"location":"version%201.x/entities/tags/#query","text":"Create parametrized request // returns result of query var queryBuilder = new TagsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var tags = await client.Tags.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/entities/tags/#create-new-tag","text":"// returns created tag var tag = new Tag() { Name = \"Name\", Description = \"Tag\" }; if (await client.IsValidJWToken()) { var createdtag = await client.Tags.Create(tag); }","title":"Create new Tag"},{"location":"version%201.x/entities/tags/#update-tag","text":"// returns updated tag var tag = client.Tags.GetByID(123); tag.Name = \"New Name\"; if (await client.IsValidJWToken()) { var updatedTag = await client.Tags.Update(tag); }","title":"Update Tag"},{"location":"version%201.x/entities/tags/#delete-tag","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Tags.Delete(123); }","title":"Delete Tag"},{"location":"version%201.x/entities/taxonomies/","text":"Taxonomies Here is a list of methods and examples of working with Taxonomies GetAll() // returns all taxonomies var taxonomies = await client.Taxonomies.GetAll(); GetByID // returns taxonomy by ID var taxonomy = await client.Taxonomies.GetByID(123); Query Create parametrized request // returns result of query var queryBuilder = new TaxonomiesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var taxonomies = await client.Taxonomies.Query(queryBuilder);","title":"Taxonomies"},{"location":"version%201.x/entities/taxonomies/#taxonomies","text":"Here is a list of methods and examples of working with Taxonomies","title":"Taxonomies"},{"location":"version%201.x/entities/taxonomies/#getall","text":"// returns all taxonomies var taxonomies = await client.Taxonomies.GetAll();","title":"GetAll()"},{"location":"version%201.x/entities/taxonomies/#getbyid","text":"// returns taxonomy by ID var taxonomy = await client.Taxonomies.GetByID(123);","title":"GetByID"},{"location":"version%201.x/entities/taxonomies/#query","text":"Create parametrized request // returns result of query var queryBuilder = new TaxonomiesQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var taxonomies = await client.Taxonomies.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/entities/users/","text":"Users Here is a list of methods and examples of working with Users GetAll() // execute request users without credentials - returns only you var users = await client.Users.GetAll(); // send credentials - list of all users var users = await client.Users.GetAll(useAuth:true); GetByID // returns user by ID var user = await client.Users.GetByID(123); GetCurrentUser // returns current user var user = await client.Users.GetCurrentUser(); Query Create parametrized request // returns result of query var queryBuilder = new UsersQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var users = await client.Users.Query(queryBuilder); Create new User // returns created user var user = new User(\"username\",\"email\",\"password\") { NickName= \"nickname\" }; if (await client.IsValidJWToken()) { var user = await client.Users.Create(user); } Update User // returns updated user var user = client.Users.GetByID(123); user.Name = \"New Name\"; if (await client.IsValidJWToken()) { var updatedUser = await client.Users.Update(user); } Delete User // returns result of deletion if (await client.IsValidJWToken()) { //second param - user to reassign all content var result = await client.Users.Delete(123,321); }","title":"Users"},{"location":"version%201.x/entities/users/#users","text":"Here is a list of methods and examples of working with Users","title":"Users"},{"location":"version%201.x/entities/users/#getall","text":"// execute request users without credentials - returns only you var users = await client.Users.GetAll(); // send credentials - list of all users var users = await client.Users.GetAll(useAuth:true);","title":"GetAll()"},{"location":"version%201.x/entities/users/#getbyid","text":"// returns user by ID var user = await client.Users.GetByID(123);","title":"GetByID"},{"location":"version%201.x/entities/users/#getcurrentuser","text":"// returns current user var user = await client.Users.GetCurrentUser();","title":"GetCurrentUser"},{"location":"version%201.x/entities/users/#query","text":"Create parametrized request // returns result of query var queryBuilder = new UsersQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var users = await client.Users.Query(queryBuilder);","title":"Query"},{"location":"version%201.x/entities/users/#create-new-user","text":"// returns created user var user = new User(\"username\",\"email\",\"password\") { NickName= \"nickname\" }; if (await client.IsValidJWToken()) { var user = await client.Users.Create(user); }","title":"Create new User"},{"location":"version%201.x/entities/users/#update-user","text":"// returns updated user var user = client.Users.GetByID(123); user.Name = \"New Name\"; if (await client.IsValidJWToken()) { var updatedUser = await client.Users.Update(user); }","title":"Update User"},{"location":"version%201.x/entities/users/#delete-user","text":"// returns result of deletion if (await client.IsValidJWToken()) { //second param - user to reassign all content var result = await client.Users.Delete(123,321); }","title":"Delete User"},{"location":"version%202.x/getting-started/","text":"Getting Started","title":"Getting Started"},{"location":"version%202.x/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"version%202.x/entities/comments/","text":"Here is a list of methods and examples of working with Comments GetAll() // returns all comments var comments = await client.Comments.GetAll(); GetByID // returns comment by ID var comment = await client.Comments.GetByID(123); GetCommentsForPost // returns comments from post var comments = await client.Comments.GetCommentsForPost(123) Query Create parametrized request // returns result of query var queryBuilder = new CommentsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var comments = await client.Comments.Query(queryBuilder); Get threaded comments If your blog supports threaded comments (comments with direct answers) you can order and get the right depth for them with this handy extension method: var comments = await client.Comments.GetCommentsForPost(123) var commentsThreaded = comments.ToThreaded(); Create new Comment // returns created comment var comment = new Comment() { Content = new Content(\"Comment\"), PostId = 123, AuthorId = 1, AuthorEmail = \"test@test.com\" }; if (await client.IsValidJWToken()) { var createdComment = await client.Comments.Create(comment); } Update Comment // returns updated comment var comment= client.Comments.GetByID(123); comment.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedComment = await client.Comments.Update(comment); } Delete Comment // returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Comments.Delete(123); }","title":"Comments"},{"location":"version%202.x/entities/comments/#getall","text":"// returns all comments var comments = await client.Comments.GetAll();","title":"GetAll()"},{"location":"version%202.x/entities/comments/#getbyid","text":"// returns comment by ID var comment = await client.Comments.GetByID(123);","title":"GetByID"},{"location":"version%202.x/entities/comments/#getcommentsforpost","text":"// returns comments from post var comments = await client.Comments.GetCommentsForPost(123)","title":"GetCommentsForPost"},{"location":"version%202.x/entities/comments/#query","text":"Create parametrized request // returns result of query var queryBuilder = new CommentsQueryBuilder(); queryBuilder.PerPage = 40; queryBuilder.Page = 2; queryBuilder.Before = DateTime.Now; var comments = await client.Comments.Query(queryBuilder);","title":"Query"},{"location":"version%202.x/entities/comments/#get-threaded-comments","text":"If your blog supports threaded comments (comments with direct answers) you can order and get the right depth for them with this handy extension method: var comments = await client.Comments.GetCommentsForPost(123) var commentsThreaded = comments.ToThreaded();","title":"Get threaded comments"},{"location":"version%202.x/entities/comments/#create-new-comment","text":"// returns created comment var comment = new Comment() { Content = new Content(\"Comment\"), PostId = 123, AuthorId = 1, AuthorEmail = \"test@test.com\" }; if (await client.IsValidJWToken()) { var createdComment = await client.Comments.Create(comment); }","title":"Create new Comment"},{"location":"version%202.x/entities/comments/#update-comment","text":"// returns updated comment var comment= client.Comments.GetByID(123); comment.Content.Raw = \"New Content\"; if (await client.IsValidJWToken()) { var updatedComment = await client.Comments.Update(comment); }","title":"Update Comment"},{"location":"version%202.x/entities/comments/#delete-comment","text":"// returns result of deletion if (await client.IsValidJWToken()) { var result = await client.Comments.Delete(123); }","title":"Delete Comment"}]}